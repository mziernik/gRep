import {React, PropTypes, Field, Utils, Column, Repository, Record, Type, If, CRUDE} from '../../../core';
import {Page, FontAwesome, Link, Table, FCtrl, Panel, Button} from '../../../components';


export default class PRepoDetails extends Page {

    repo: ?Repository = null;
    static propTypes = {
        repo: PropTypes.string
    };

    constructor() {
        super(...arguments);
        this.repo = Repository.get(this.props.repo, true);
    }

    render() {

        const repo: Repository = this.repo;

        if (!super.waitForRepo(this.repo))
            return <div>
                {super.renderTitle(`Repozytorium "${this.repo.name}"`)}
                <span>Inicjalizacja repozytorium. Proszę czekać...</span>
            </div>;


        return <Panel fit>
            {super.renderTitle("Szczegóły repozytorium " + Utils.escape(repo.name))}
            <Table
                columns={COLUMNS}
                rows={ Utils.forEach(repo.columns, (c: Column) => {
                    return {
                        key: c.key,
                        name: c.name,
                        subtitle: c.subtitle,
                        hint: c.hint,
                        desc: c.description,
                        type: c.type.name,
                        req: c.required,
                        hidden: c.hidden,
                        readonly: c.readOnly,
                        uniq: c.unique,
                        trim: c.trimmed,
                        autogen: c.autoGenerated,
                        dem: c.onDemand,
                        fk: c.foreign,
                        enum: c.enumerate,
                        unt: c.units,
                        defunit: c.defaultUnit,
                        min: c.min,
                        max: c.max,
                        regex: c.regex,
                        defval: c.defaultValue,
                        case: c.textCasing,
                        validator: c.validator,
                        sort: c.sortable,
                        filter: c.filterable,
                        search: c.searchable,
                        sortOrder: c.sortOrder
                    }
                })}>


            </Table>

        </Panel>

    }
}

function col(type: Type.DataType, key: string, name: string) {
    return new Column((fc: Column) => {
        fc.type = type;
        fc.key = key;
        fc.name = name;
    })
}

const COLUMNS = [
    col(Type.STRING, "key", "Klucz"),
    col(Type.STRING, "name", "Nazwa"),
    col(Type.STRING, "subtitle", "Podtytuł"),
    col(Type.STRING, "hint", "Hint"),
    col(Type.STRING, "desc", "Opis"),
    col(Type.STRING, "type", "Typ"),
    col(Type.BOOLEAN, "req", "Wymagane"),
    col(Type.BOOLEAN, "hidden", "Ukryta"),
    col(Type.BOOLEAN, "readonly", "Tylko do odczytu"),
    col(Type.BOOLEAN, "uniq", "Unialne"),
    col(Type.BOOLEAN, "trim", "Przycięte"),
    col(Type.BOOLEAN, "autogen", "Automatycznie generowane"),
    col(Type.BOOLEAN, "dem", "Na żądanie"),
    col(Type.BOOLEAN, "fk", "Klucz obcy"),
    col(Type.BOOLEAN, "enum", "Enumerata"),
    col(Type.BOOLEAN, "unt", "Jednostki"),
    col(Type.STRING, "defunit", "Domyślna jednostka"),
    col(Type.INT, "min", "Minimum"),
    col(Type.INT, "max", "Maksimum"),
    col(Type.STRING, "regex", "Wyrażenie regularne"),
    col(Type.STRING, "defval", "Wartość domyślna"),
    col(Type.STRING, "case", "Konwersja wielkości"),
    col(Type.BOOLEAN, "validator", "Walidator"),
    col(Type.BOOLEAN, "sort", "Sortowalne"),
    col(Type.BOOLEAN, "filter", "Filtrowalne"),
    col(Type.BOOLEAN, "search", "Wyszukiwanie"),
    col(Type.BOOLEAN, "sortOrder", "Kolejność sortowania"),

];
