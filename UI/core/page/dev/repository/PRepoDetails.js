import {React, PropTypes, Field, Utils, Column, Repository, Record, Type, Is, CRUDE} from '../../../core';
import {Page, Icon, Link, Table, FCtrl, Panel, Button} from '../../../components';
import {Attr, Attributes} from "../../../component/form/Attributes";
import {RepoConfig} from "../../../repository/Repository";
import RepoPage from "../../base/RepoPage";


export default class PRepoDetails extends RepoPage {


    constructor(props: Object, context: Object, updater: Object) {
        super(props.repo, props, context, updater);
    }

    render() {

        const repo: Repository = Repository.get(this.props.repo, true);
        const rc: RepoConfig = repo.config;
        this.title.set("Szczegóły repozytorium " + Utils.escape(repo.name));

        return <Panel fit scrollable>
            <Attributes>
                <Attr name="Klucz" value={rc.key}/>
                <Attr name="Nazwa" value={rc.name}/>
                <Attr name="Grupa" value={rc.group}/>
                <Attr name="Kolumna klucza głównego" value={rc.primaryKeyColumn ? rc.primaryKeyColumn.key : null}/>
                <Attr name="Kolumna nazwy wyświetlanej"
                      value={rc.displayNameColumn ? rc.displayNameColumn.key : null}/>
                <Attr name="Kolumna sortowania" value={rc.orderColumn ? rc.orderColumn.key : null}/>
                <Attr name="Kolumna drzewa" value={rc.parentColumn ? rc.parentColumn.key : null}/>
                <Attr name="Opis" value={rc.description}/>
                <Attr name="CRUDE" value={rc.crude}/>
                <Attr name="Ikona" value={rc.icon}/>

                <Attr name="Limit ilości wierszy" value={rc.limit}/>
                <Attr name="Przesunięcie wierszy *offset)" value={rc.offset}/>


                <Attr name="Dynamiczne" value={rc.dynamic ? "Tak" : "Nie"}/>
                <Attr name="Lokalne" value={rc.local ? "Tak" : "Nie"}/>
                <Attr name="Na żądanie" value={rc.onDemand ? "Tak" : "Nie"}/>
                <Attr name="Rozgłaszanie zmian (broadcast)" value={rc.broadcast ? "Tak" : "Nie"}/>

                <Attr name="Klasa rekordu" value={Utils.className(rc.record)}/>

                {Utils.forEach(repo.config.info, (v, k) => <Attr name={k} value={v}/>)}

                {Utils.forEach(repo.columns, (col: Column) => [
                    <hr/>,
                    <Attr name="Klucz" value={col.key}/>,
                    <Attr name="Nazwa" value={col.name}/>,
                    <Attr name="Typ" value={col.type.name}/>
                ])}

            </Attributes>

            <h4>Akcje:</h4>


            {/*{Utils.forEach(rc.actions, )}*/}

            {/*<Table*/}
            {/*columns={COLUMNS}*/}
            {/*rows={ Utils.forEach(repo.columns, (c: Column) => {*/}
            {/*return {*/}
            {/*key: c.key,*/}
            {/*name: c.name,*/}
            {/*subtitle: c.subtitle,*/}
            {/*hint: c.hint,*/}
            {/*desc: c.description,*/}
            {/*type: c.type.name,*/}
            {/*req: c.required,*/}
            {/*hidden: c.hidden,*/}
            {/*readonly: c.readOnly,*/}
            {/*uniq: c.unique,*/}
            {/*trim: c.trimmed,*/}
            {/*autogen: c.autoGenerated,*/}
            {/*dem: c.onDemand,*/}
            {/*fk: c.foreign,*/}
            {/*enum: c.enumerate,*/}
            {/*unt: c.units,*/}
            {/*defunit: c.defaultUnit,*/}
            {/*min: c.min,*/}
            {/*max: c.max,*/}
            {/*regex: c.regex,*/}
            {/*defval: c.defaultValue,*/}
            {/*case: c.textCasing,*/}
            {/*validator: c.validator,*/}
            {/*sort: c.sortable,*/}
            {/*filter: c.filterable,*/}
            {/*search: c.searchable,*/}
            {/*sortOrder: c.sortOrder*/}
            {/*}*/}
            {/*})}>*/}


            {/*</Table>*/}

        </Panel>

    }
}

function col(type: Type.DataType, key: string, name: string) {
    return new Column((fc: Column) => {
        fc.type = type;
        fc.key = key;
        fc.name = name;
    })
}

const COLUMNS = [
    col(Type.STRING, "key", "Klucz"),
    col(Type.STRING, "name", "Nazwa"),
    col(Type.STRING, "subtitle", "Podtytuł"),
    col(Type.STRING, "hint", "Hint"),
    col(Type.STRING, "desc", "Opis"),
    col(Type.STRING, "type", "Typ"),
    col(Type.BOOLEAN, "req", "Wymagane"),
    col(Type.BOOLEAN, "hidden", "Ukryta"),
    col(Type.BOOLEAN, "readonly", "Tylko do odczytu"),
    col(Type.BOOLEAN, "uniq", "Unialne"),
    col(Type.BOOLEAN, "trim", "Przycięte"),
    col(Type.BOOLEAN, "autogen", "Automatycznie generowane"),
    col(Type.BOOLEAN, "dem", "Na żądanie"),
    col(Type.BOOLEAN, "fk", "Klucz obcy"),
    col(Type.BOOLEAN, "enum", "Enumerata"),
    col(Type.BOOLEAN, "unt", "Jednostki"),
    col(Type.STRING, "defunit", "Domyślna jednostka"),
    col(Type.INT, "min", "Minimum"),
    col(Type.INT, "max", "Maksimum"),
    col(Type.STRING, "regex", "Wyrażenie regularne"),
    col(Type.STRING, "defval", "Wartość domyślna"),
    col(Type.STRING, "case", "Konwersja wielkości"),
    col(Type.BOOLEAN, "validator", "Walidator"),
    col(Type.BOOLEAN, "sort", "Sortowalne"),
    col(Type.BOOLEAN, "filter", "Filtrowalne"),
    col(Type.BOOLEAN, "search", "Wyszukiwanie"),
    col(Type.BOOLEAN, "sortOrder", "Kolejność sortowania"),

];
