//@Flow
'use strict';
import {React, Field, Type, Column, Utils, RepoConfig, Record, Repository, Dev, CRUDE} from '../../core';
import {Component, Page, Icon, FCtrl, Button, Table, Link, Panel, Attributes} from '../../components';
import {ModalWindow, MW_BUTTONS} from "../../component/ModalWindow";
import RecordCtrl from "../../component/form/RecordCtrl";

function addRandom() {
    const rec: RUsersRecord = RUSERS.createRecord(RepoTab);

    const usr = Dev.randomUser();

    rec.ID.value = RUSERS.max(RUsers.ID, 0) + 1;
    rec.FIRST_NAME.value = usr.firstName;
    rec.LAST_NAME.value = usr.lastName;
    rec.DISPLAY_NAME.value = usr.firstName[0] + ". " + usr.lastName;
    rec.LOGIN.value = usr.firstName.toLowerCase() + "." + usr.lastName.toLowerCase();
    rec.EMAIL.value = rec.LOGIN.value + "@email.com";
    rec.ACTIVE.value = Math.random() > 0.5;
    rec.SEX.value = usr.male ? "M" : "F";

    Repository.update(RepoTab, [rec]);
}


export default class RepoTab extends Component {

    edit: RUsersRecord;
    table: Table;


    constructor() {
        super(...arguments);
        RUSERS.onChange.listen(this, (action: CRUDE, rec: Record, changes: Map) => {
            if (action !== CRUDE.UPDATE)
                this.forceUpdate(true);
        });
    }

    add() {
        ModalWindow.create((mw: ModalWindow) => {
            mw.content = this.editUser();
        }).open();
    }

    remove() {
        if (!RUSERS.rows.size) return;
        const rec: RUsersRecord = RUSERS.get(this, Utils.forEach(RUSERS.rows, (v, k) => k).random(), true);
        rec.action = CRUDE.DELETE;
        Repository.update(RepoTab, [rec]);
    }

    editUser() {
        const rec: RUsersRecord = RUSERS.createRecord(RepoTab);
        const ctrl: RecordCtrl = new RecordCtrl(this.node.currentPage, rec, CRUDE.CREATE);
        return ctrl.render();
    }

    editRandom() {
        const rec: RUsersRecord = RUSERS.get(this, Utils.forEach(RUSERS.rows, (v, k) => k).random(), true);
        rec.action = CRUDE.UPDATE;

        const usr = Dev.randomUser();

        rec.FIRST_NAME.value = usr.firstName;
        rec.LAST_NAME.value = usr.lastName;
        rec.DISPLAY_NAME.value = usr.firstName[0] + ". " + usr.lastName;
        rec.EMAIL.value = rec.LOGIN.value + "@new.email.com";
        rec.ACTIVE.value = Math.random() > 0.5;
        rec.SEX.value = usr.male ? "M" : "F";

        Repository.update(RepoTab, [rec]);
    }

    render() {


        return <Panel fit>

            <div style={{textAlign: "right"}}>
                <Button type="primary" icon={Icon.USERS} onClick={e => addRandom()}>Generuj</Button>
                <Button type="success" icon={Icon.USER_PLUS} onClick={e => this.add()}>Dodaj</Button>
                <Button type="danger" icon={Icon.USER_TIMES} onClick={e => this.remove()}>Usuń</Button>
                <Button type="primary" icon={Icon.PENCIL} onClick={e => this.editRandom()}>Modyfikuj</Button>
            </div>

            <Table repository={RUSERS}/>
        </Panel>
    }

}

export class RUsers extends Repository {

    static ID: Column = new Column((c: Column) => {
        c.key = "id";
        c.name = "ID";
        c.type = "int";
        c.autoGenerated = true;
        c.required = true;
        c.unique = true;
    });

    static TOKEN: Column = new Column((c: Column) => {
        c.key = "token";
        c.name = "Zewnętrzny token";
        c.type = "uid";
        c.hidden = true;
    });

    static LOGIN: Column = new Column((c: Column) => {
        c.key = "login";
        c.name = "Login";
        c.type = "string";
        c.required = true;
        c.unique = true;
    });

    static PASS: Column = new Column((c: Column) => {
        c.key = "pass";
        c.name = "Hasło";
        c.type = "password";
        c.hidden = true;
    });

    static ACTIVE: Column = new Column((c: Column) => {
        c.key = "active";
        c.name = "Aktywny";
        c.type = "boolean";
        c.defaultValue = true;
    });

    static SEX: Column = new Column((c: Column) => {
        c.key = "sex";
        c.name = "Płeć";
        c.type = "enum";
        c.enumerate = {
            "M": "Mężczyzna",
            "F": "Kobieta"
        };
        c.enumIcons = {
            "M": Icon.MARS,
            "F": Icon.VENUS,
        }
    });

    static FIRST_NAME: Column = new Column((c: Column) => {
        c.key = "firstName";
        c.name = "Imię";
        c.type = "string";
    });

    static LAST_NAME: Column = new Column((c: Column) => {
        c.key = "lastName";
        c.name = "Nazwisko";
        c.type = "string";
    });

    static DISPLAY_NAME: Column = new Column((c: Column) => {
        c.key = "displayName";
        c.name = "Nazwa wyświetlana";
        c.type = "string";
        c.required = true;
    });

    static EMAIL: Column = new Column((c: Column) => {
        c.key = "email";
        c.name = "e-mail";
        c.type = "email";
    });


    constructor() {
        super((c: RepoConfig) => {
            c.key = "users";
            c.name = "Użytkownicy";
            c.record = RUsersRecord;
            c.primaryKeyColumn = RUsers.ID;
            c.displayNameColumn = RUsers.LOGIN;
            c.crude = "CRU";
            c.local = false;
            c.icon = "fa fa-users";
            c.actions = {
                add: {record: true, name: "Dodaj", confirm: null, type: "primary", icon: "fa fa-user-plus"},
                rem: {
                    record: true,
                    name: "Usuń",
                    confirm: "Czy na pewno usunąć?",
                    type: "danger",
                    icon: "fa fa-user-times"
                },
                addRandom: {
                    record: false,
                    name: "Dodaj losowy",
                    confirm: null,
                    type: "primary",
                    icon: "fa fa-user-plus"
                },
                removeRandom: {
                    record: false,
                    name: "Usuń losowy",
                    confirm: null,
                    type: "danger",
                    icon: "fa fa-user-times"
                }
            };
        });
    }

}

export class RUsersRecord extends Record {

    ID: Field = new Field(RUsers.ID, this);
    TOKEN: Field = new Field(RUsers.TOKEN, this);
    LOGIN: Field = new Field(RUsers.LOGIN, this);
    PASS: Field = new Field(RUsers.PASS, this);
    ACTIVE: Field = new Field(RUsers.ACTIVE, this);
    SEX: Field = new Field(RUsers.SEX, this);
    FIRST_NAME: Field = new Field(RUsers.FIRST_NAME, this);
    LAST_NAME: Field = new Field(RUsers.LAST_NAME, this);
    DISPLAY_NAME: Field = new Field(RUsers.DISPLAY_NAME, this);
    EMAIL: Field = new Field(RUsers.EMAIL, this);

}


const RUSERS: RUsers = new RUsers();

addEventListener("load", () => {
    for (let i = 0; i < 10; i++)
        addRandom();
});

