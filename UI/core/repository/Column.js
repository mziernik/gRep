// @flow
'use strict';

import {Check, Is, React, Type, DEV_MODE, Record, Repository, Trigger, Utils, Dispatcher, Store} from "../core";
import {DataType} from "./Type";
import {RepoError} from "./Repository";

export class ForeignConstraint {
    localColumn: Column;
    foreignColumn: Column;
    values: ?any[];
}

export class Foreign {
    repo: Repository; // zewnętrzne repozytorium
    column: Column;
    constraints: ForeignConstraint[] = [];
}


//ToDo: Miłosz: readOnly + !autoUpdate = konflikt
export default class Column {

    type: ?DataType = null;
    key: ?string = null;
    name: ?string = null;
    subtitle: ?string = null;
    hint: ?string = null;
    description: ?string = null;
    /**  wartość zostanie wczytana na żądanie pobrania rekordu - zalecane dla dużych danych */
    onDemand: boolean = false;
    enumerate: ?() => Map | Object | Array = null;
    /** Ikony poszczególnych pozycji enumeraty wyświetlane w trybie inline*/
    enumIcons: ?Object = null;
    enumStyles: ?Object = null;
    units: ?() => {} = null;
    readOnly: ?boolean = null;
    required: ?boolean = null;
    disabled: ?boolean = null;
    unique: ?boolean = null;
    min: ?number = null;
    max: ?number = null;
    regex: ?string = null;
    autoGenerated: ?boolean = null;
    trimmed: ?boolean = null;
    defaultValue: ?any = null;
    defaultUnit: ?[] = null; //domyślna jednostka [klucz, tekst, mnożnik]
    //ToDo: Parsowanie ze stringa
    textCasing: ?string = null; // określa formatowanie tekstu (uppercase/lowercase/capitalize)
    validator: ?(value: any) => void = null;

    sortable: ? boolean = null;
    sortOrder: ? boolean = null;
    filterable: ? boolean = null;
    searchable: ? boolean = null;
    hidden: ? boolean = null;
    compare: ?(a: ?any, b: ?any) => number = null;
    filter: ?(filter: ?any, cell: ?any) => boolean = null;
    foreign: ?Foreign = null;
    repository: ?Repository = null;

    constructor(config: (c: Column) => void) {

        Utils.lazyProvider(this, "foreign", value => {
            if (!Is.defined(value) || value instanceof Foreign)
                return value;


            const f: Foreign = new Foreign();

            if (Is.func(value)) {
                f.repo = Check.instanceOf(value(), [Repository]);
                f.column = f.repo.primaryKeyColumn;
                return f;
            }

            if (Is.string(value)) {
                const items = value.split(".");
                f.repo = Repository.get(items[0], true);
                f.column = items[1] ? f.repo.getColumn(items[1]) : f.repo.primaryKeyColumn;
                return f;
            }

            f.repo = Repository.get(value.repository, true);
            f.column = value.column ? Is.string(value.column, c => f.repo.getColumn(c, true), c => Check.instanceOf(c, [Column]))
                : f.repo.primaryKeyColumn;


            if (Is.string(value.constraints)) {

                const fc: ForeignConstraint = new ForeignConstraint();
                f.constraints.push(fc);
                const items: string[] = Check.isString(value.constraints).split(".");
                fc.localColumn = this.repository.getColumn(items[0], true, true);
                if (items.length === 2) {
                    let key = items[1];
                    if (!fc.localColumn.foreign)
                        throw new RepoError(this.repository, "Kolumna " + key + " nie posiada klucza obcego");
                    fc.foreignColumn = fc.localColumn.foreign.repo.getColumn(key, true, true);
                }

                return f;
            }

            //
            // Utils.forEach(value.constraints, (obj, key) => {
            //     const fc: ForeignConstraint = new ForeignConstraint();
            //     fc.values = Utils.asArray(obj.value);
            //     fc.localColumns = Utils.forEach(Utils.asArray(obj.column), c => this.repository.getColumn(c));
            //     fc.foreignColumn = f.repo.getColumn(key, true, false);
            //     f.constraints.push(fc);
            // });

            return f;
        });

        if (DEV_MODE)
            this["#instance"] = null;

        Object.preventExtensions(this);
        Check.isFunction(config);
        config(this);

        if (DEV_MODE)
            this["#instance"] = this.key;

        this._update();
    }

    _load(data: Object) {
        for (let name in this)
            if (data[name] !== undefined)
                this[name] = data[name];
        this._update();
    }

    _update() {

        Check.id(this.key);
        Check.nonEmptyString(this.name, new Error("Nazwa kolumny " + this.key + " nie może być pusta"));

        if (!(this.type instanceof DataType))
            this.type = Type.get(this.type);

        if (this.trimmed === null && this.type.single === "string" && this.type !== Type.PASSWORD)
            this.trimmed = true;

        Is.string(this.type, t => this.type = Type.get(t));
        Check.instanceOf(this.type, [Type.DataType]);

        Check.nonEmptyString(this.key);
        Check.nonEmptyString(this.name);

        this.hint = this.hint || this.name;
        //
        // if (Is.string(this.foreign)) {
        //     const foreignRepoKey = this.foreign;
        //     this.foreign = () => Repository.get(foreignRepoKey, true);
        // }

        if (!this.enumerate && this.type.enumerate)
            this.enumerate = () => this.type.enumerate;

        this.enumIcons = this.enumIcons || this.type.enumIcons;
        this.enumStyles = this.enumStyles || this.type.enumStyles;

        if (this.enumerate && !Is.func(this.enumerate)) {
            const arr = this.enumerate instanceof Array;
            const map: Map = new Map();
            Utils.forEach(this.enumerate, (value, key) => {
                if (arr) {
                    key = value;
                    if (value instanceof Array) {
                        key = value[0];
                        value = Is.defined(value[1]) ? value[1] : key;
                    }
                }


                map.set(this.type.parse(key), value);
            });
            this.enumerate = () => map;
        }


        if (this.type.units && !this.units)
            this.units = () => this.type.units;

        Is.defined(this.enumerate, e => Check.isFunction(e));
        Is.defined(this.units, e => Check.isFunction(e));

    }

    parse(value: any): any {
        return this.type.parse(value);
    }


}

