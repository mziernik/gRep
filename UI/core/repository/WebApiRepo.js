import {
    Record,
    Repository,
    Field,
    Column,
    RepoConfig,
    Dev,
    Utils,
    CRUDE,
    Ready,
    Type,
    AppEvent
} from "../core.js";
import {Icon} from "../components.js";


export class RWebApi extends Repository {

    static ID: Column = new Column((c: Column) => {
        c.key = "id";
        c.name = "ID";
        c.type = Type.INT;
        c.autoGenerated = true;
        c.required = true;
        c.unique = true;
        c.disabled = true;
    });

    static TYPE: Column = new Column((c: Column) => {
        c.key = "request";
        c.name = "Typ";
        c.type = Type.BOOLEAN;
        c.enumIcons = {
            true: Icon.ARROW_UP,
            false: Icon.ARROW_DOWN
        };
        c.enumerate = {
            true: "Żądanie",
            false: "Odpowiedź"
        };
    });

    static DATE: Column = new Column((c: Column) => {
        c.key = "date";
        c.name = "Data";
        c.type = Type.TIMESTAMP;
    });

    static METHOD: Column = new Column((c: Column) => {
        c.key = "method";
        c.name = "Metoda";
        c.type = Type.STRING;
    });

    static DATA: Column = new Column((c: Column) => {
        c.key = "data";
        c.name = "Dane";
        c.type = Type.ANY;
    });

    constructor() {
        super((c: RepoConfig) => {
            c.key = "webapi";
            c.name = "WebApi";
            c.description = "Komunikacja WebApi";
            c.record = EWebApi;
            c.primaryKeyColumn = RWebApi.ID;
            c.crude = "R";
            c.group = "Narzędzia";
        })
    }
}

export class EWebApi extends Record {
    ID: Field = new Field(RWebApi.ID, this);
    TYPE: Field = new Field(RWebApi.TYPE, this);
    DATE: Field = new Field(RWebApi.DATE, this);
    METHOD: Field = new Field(RWebApi.METHOD, this);
    DATA: Field = new Field(RWebApi.DATA, this);
}


export const RWEBAPI: RWebApi = Repository.register(new RWebApi());

RWEBAPI.storage = null;
RWEBAPI.isReady = true;
Ready.confirm("WebApiRepo", RWEBAPI);

AppEvent.WEB_API_ACTION.listen("WebApiRepo", data => {

    const rec: EWebApi = RWEBAPI.createRecord("WebApiRepo", CRUDE.CREATE);
    rec.ID.value = RWEBAPI.max(RWebApi.ID, 0) + 1;
    rec.TYPE.value = !!data.request;
    rec.DATE.value = data.ts;
    rec.METHOD.value = data.method;
    rec.DATA.value = data.data || data.params;

    Repository.commit("WebApiRepo", [rec]);
});
