import {Field, DataType, Repository, Record} from "../core/core";


export class RThreadsRepo extends Repository {


    constructor() {
        super({
            key: "threads",
            name: "Wątki",
            pk: "long",
            record: RThreads,
            local: true,
            readOnly: true,
        });
    }

}

export class RThreads extends Record {

    ID: Field = new Field({
        key: "id",
        name: "ID",
        type: "long",
    });

    NAME: Field = new Field({
        key: "name",
        name: "Nazwa",
        type: "string",
    });

    GROUP: Field = new Field({
        key: "group",
        name: "Grupa",
        type: "string",
    });

    STATE: Field = new Field({
        key: "state",
        name: "Stan",
        type: "string",
    });

    ALIVE: Field = new Field({
        key: "alive",
        name: "Żyje",
        type: "boolean",
    });

    DAEMON: Field = new Field({
        key: "daemon",
        name: "Demon",
        type: "boolean",
    });

    INTERRUPTED: Field = new Field({
        key: "interrupted",
        name: "Przerwany",
        type: "boolean",
    });

    PRIORITY: Field = new Field({
        key: "priority",
        name: "Priorytet",
        type: "int",
    });

    CPUTIME: Field = new Field({
        key: "cpuTime",
        name: "Czas procesora",
        type: "long",
    });

    USERTIME: Field = new Field({
        key: "userTime",
        name: "Czas użytkownika",
        type: "long",
    });

    ALLOC: Field = new Field({
        key: "alloc",
        name: "Zaalokowano",
        type: "size",
    });

    BLOCKED: Field = new Field({
        key: "blocked",
        name: "Blokady",
        type: "int",
    });

    WAITED: Field = new Field({
        key: "waited",
        name: "Oczekiwania",
        type: "int"
    });


    constructor() {
        super(...arguments);
        this.init();
    };


}

export class RAttributeRepo extends Repository {


    constructor() {
        super({
            key: "attribute",
            name: "Atrybut",
            pk: "int",
            record: RAttribute,
            local: false,
        });
    }

}

export class RAttribute extends Record {

    ID: Field = new Field({
        key: "id",
        name: "ID",
        type: "int",
        required: true,
        readOnly: true,
        autoGenerated: true,
        unique: true,
    });

    UID: Field = new Field({
        key: "uid",
        name: "UID",
        type: "uid",
        required: true,
        readOnly: true,
        autoGenerated: true,
        unique: true,
    });

    CREATED: Field = new Field({
        key: "created",
        name: "Utworzono",
        type: "timestamp",
        required: true,
        readOnly: true,
        autoGenerated: true,
    });

    KEY: Field = new Field({
        key: "key",
        name: "Klucz",
        type: "key",
        required: true,
        unique: true,
    });

    PARENT: Field = new Field({
        key: "parent",
        name: "Rodzic",
        type: "int",
    });

    ELEMENTS: Field = new Field({
        key: "elements",
        name: "Elementy",
        type: "int[]",
    });

    DEFVAL: Field = new Field({
        key: "defVal",
        name: "Wartość domyślna",
        type: "string[]",
    });

    REQUIRED: Field = new Field({
        key: "required",
        name: "Wymagane",
        type: "boolean[]",
    });

    ICON: Field = new Field({
        key: "icon",
        name: "Ikona",
        type: "string",
        required: true,
    });

    NAME: Field = new Field({
        key: "name",
        name: "Nazwa",
        type: "string",
        required: true,
    });

    DESC: Field = new Field({
        key: "desc",
        name: "Opis",
        type: "memo",
        max: 1000,
    });


    constructor() {
        super(...arguments);
        this.init();
    };


}

export const R_THREADS: RThreadsRepo = Repository.register(new RThreadsRepo());
export const R_ATTRIBUTE: RAttributeRepo = Repository.register(new RAttributeRepo());