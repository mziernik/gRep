package model.repository.catalog;

import com.json.JElement;
import com.model.repository.Column;
import com.model.repository.ForeignColumn;
import com.model.repository.Record;
import com.model.repository.RecordException;
import com.model.repository.Repository;
import com.utils.Utils;
import com.utils.reflections.datatype.DataType;
import java.util.LinkedHashMap;
import java.util.Objects;
import model.repository.attribute.RAttributeElement;
import model.repository.attribute.RElement;

public class RCatalogAttributeValue extends Repository<Integer> {
    
    public final static Column<Integer> ID = new Column<>(c -> {
        c.repository = RCatalogAttributeValue.class;
        c.type = DataType.INT;
        c.readOnly = true;
        c.unique = true;
        c.autoGenerated = true;
        c.key = "id";
        c.name = "ID";
        c.hidden = true;
    });
    
    public final static ForeignColumn<Integer, RCatalogAttribute> CAT_ATTR = new ForeignColumn<>(c -> {
        c.repository = RCatalogAttributeValue.class;
        c.type = DataType.INT;
        c.key = "catAttr";
        c.name = "Atrybut katalogu";
        c.required = true;
    }, RCatalogAttribute.ID);
    
    public final static ForeignColumn<Integer, RAttributeElement> ATTR_ELM = new ForeignColumn<>(c -> {
        c.repository = RCatalogAttributeValue.class;
        c.type = DataType.INT;
        c.key = "attrElm";
        c.required = true;
        c.name = "Element atrybutu";
    }, RAttributeElement.ID);
    
    public final static Column<JElement> VALUE = new Column<>(c -> {
        c.repository = RCatalogAttributeValue.class;
        c.type = DataType.JSON;
        c.key = "value";
        c.name = "Wartość";
    });
    
    @Override
    public void validate(Record rec) throws Exception {
        super.validate(rec);
        if (rec == null)
            return;
        
        Record catAttr = rec.getForeign(CAT_ATTR); //RCatalogAttribute
        Record attrElm = rec.getForeign(ATTR_ELM); //RAttributeElement
        Record elm = attrElm.getForeign(RAttributeElement.ELM); //RElement

        Integer v1 = catAttr.get(RCatalogAttribute.ATTR);
        Integer v2 = attrElm.get(RAttributeElement.ATTR);
        
        JElement val = rec.get(VALUE);
        LinkedHashMap<String, String> enumerate = elm.get(RElement.ENUMERATE);
        
        if (enumerate != null && val != null) {
            String strVal = val.asValue().asString();
            
            if (!enumerate.containsKey(strVal))
                throw new RecordException(rec, "Nieprawidłowa wartość enumeraty: " + Utils.escape(strVal));
        }
        
        if (!Objects.equals(v1, v2))
            throw new RecordException(rec, "Konflikt atrybutów: " + catAttr + ", " + attrElm);
        
    }
    
    public RCatalogAttributeValue() {
        super(c -> {
            c.key = "catalogAttrValue";
            c.daoName = "data.catalog_attribute_value";
            c.name = "Wartość atrybutu katalogu";
            c.group = "Katalogi";
            c.primaryKey = ID;
            c.displayName = VALUE;
        });
    }
    
}
